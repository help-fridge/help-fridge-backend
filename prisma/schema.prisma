generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FoodCategory {
  idx  Int    @id
  name String @db.VarChar
  food Food[]

  @@map("food_category_tb")
}

model Food {
  idx          Int          @id @default(autoincrement())
  categoryIdx  Int          @map("category_idx")
  name         String       @db.VarChar
  expiration   Int
  foodCategory FoodCategory @relation(fields: [categoryIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_food_category_tb_to_food_tb")
  foodUnit     FoodUnit[]
  fridge       Fridge[]

  @@map("food_tb")
}

model FoodUnit {
  foodIdx Int  @map("food_idx")
  unitIdx Int  @map("unit_idx")
  food    Food @relation(fields: [foodIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_food_tb_to_food_unit_tb")
  unit    Unit @relation(fields: [unitIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_unit_tb_to_food_unit_tb")

  @@id([foodIdx, unitIdx])
  @@map("food_unit_tb")
}

model Fridge {
  idx        Int       @id @default(autoincrement())
  storageIdx Int       @map("storage_idx")
  foodIdx    Int       @map("food_idx")
  unitIdx    Int       @map("unit_idx")
  userIdx    Int       @map("user_idx")
  amount     Int
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  expiredAt  DateTime? @map("expired_at") @db.Timestamptz(6)
  food       Food      @relation(fields: [foodIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_food_tb_to_fridge_tb")
  storage    Storage   @relation(fields: [storageIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_storage_tb_to_fridge_tb")
  unit       Unit      @relation(fields: [unitIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_unit_tb_to_fridge_tb")
  user       User      @relation(fields: [userIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_tb_to_fridge_tb")

  @@map("fridge_tb")
}

model LocalAccount {
  idx  Int    @id
  id   String @db.VarChar
  pw   String @db.VarChar
  user User   @relation(fields: [idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_tb_to_local_account_tb")

  @@map("local_account_tb")
}

model Storage {
  idx    Int      @id @default(autoincrement())
  name   String   @db.VarChar
  fridge Fridge[]

  @@map("storage_tb")
}

model Unit {
  idx      Int        @id @default(autoincrement())
  name     String     @db.VarChar
  foodUnit FoodUnit[]
  fridge   Fridge[]

  @@map("unit_tb")
}

model User {
  idx          Int           @id @default(autoincrement())
  nickname     String        @db.VarChar
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  fridge       Fridge[]
  localAccount LocalAccount?

  @@map("user_tb")
}
